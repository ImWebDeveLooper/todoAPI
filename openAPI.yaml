openapi: 3.0.3
info:
  title: Todo API
  version: "1.0"
  description: This is a Todo List App by API
servers:
  - url: localhost:3000
tags:
  - name: Category
    description: Category Management
  - name: Task
    description: Tasks Management
paths:
  /categories:
    get:
      tags:
        - Category
      summary: Get All Categories
      description: Get All Categories
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
    post:
      tags:
        - Category
      summary: Add a new Category
      description: Add a new Category
      requestBody:
        description: Create a new Category
        content:
          application/json:
            schema:
              required:
                - categoryTitle
              type: object
              properties:
                categoryTitle:
                  type: string
                  example: Programmer
      responses:
        '201':
          description: Created Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /categories/{categoryId}:
    get:
      tags:
        - Category
      summary: Find a Category by ID
      description: Find a Category by ID
      parameters:
        - name: categoryId
          in: path
          description: ID of Category To Return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Category"
        '400':
          description: Invalid ID Supplied
        '404':
          description: Category Not Found
    patch:
      tags:
        - Category
      summary: Update a Category
      description: Update a Category
      parameters:
        - name: categoryId
          in: path
          description: ID of Category That Needs To Be Updated.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
          description: Update a Category
          content:
            application/json:
              schema:
                required:
                  - categoryTitle
                type: object
                properties:
                  categoryTitle:
                    type: string
                    example: Programmer
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Invalid ID
        '404':
          description: Category Not Found
        '405':
          description: Validation Exception
    delete:
      tags:
        - Category
      summary: Delete a Category
      description: Delete a Category
      parameters:
        - name: categoryId
          in: path
          description: Category Id To Delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Body Return for Response
        '400':
          description: Invalid Category ID
  /tasks:
    get:
      tags:
        - Task
      summary: Get All Tasks
      description: Get All Tasks
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Task"
    post:
      tags:
        - Task
      summary: Add a new Task
      description: Add a new Task
      requestBody:
        description: Create a new Task
        content:
          application/json:
            schema:
              required:
                - taskTitle
                - status
                - categoryId
              type: object
              properties:
                taskTitle:
                  type: string
                  example: Golang Task
                status:
                  type: boolean
                categoryId:
                  type: integer
                  example: 3
      responses:
        '201':
          description: Created Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /tasks/{taskId}:
    get:
      tags:
        - Task
      summary: Find a Task by ID
      description: Find a Task by ID
      parameters:
        - name: taskId
          in: path
          description: ID of Task To Return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Task"
        '400':
          description: Invalid ID Supplied
        '404':
          description: Task Not Found
    patch:
      tags:
        - Task
      summary: Update a Task
      description: Update a Task
      parameters:
        - name: taskId
          in: path
          description: ID of Task That Needs To Be Updated.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update a Task
        content:
          application/json:
            schema:
              required:
                - taskTitle
                - status
                - categoryId
              type: object
              properties:
                taskTitle:
                  type: string
                  example: Golang Task
                status:
                  type: boolean
                categoryId:
                  type: integer
                  example: 3
      responses:
        '200':
          description: Successful Operation
        '400':
          description: Invalid ID
        '404':
          description: Category Not Found
        '405':
          description: Validation Exception
    delete:
      tags:
        - Task
      summary: Delete a Task
      description: Delete a Task
      parameters:
        - name: taskId
          in: path
          description: Task ID To Delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Body Return for Response
        '400':
          description: Invalid Task ID
components:
  schemas:
    Category:
      type: array
      items:
        type: object
        properties:
          categoryId:
            type: integer
            format: int32
            example: 12
          categoryTitle:
            type: string
            example: Programmer
    Task:
      type: array
      items:
        type: object
        properties:
          taskId:
            type: integer
            format: int32
            example: 12
          taskTitle:
            type: string
            example: Golang Task
          status:
            type: boolean
          categoryId:
            type: integer
            example: 3